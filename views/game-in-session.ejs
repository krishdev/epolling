<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Game Time</title>

        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.12"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/vue-resource/1.5.3/vue-resource.min.js"></script>
        <style>
            .game-logo {
                width: 15%;
                margin: 0 auto;
            }
            img {
                width: 100%;
            }
            .game-image {
                max-width: 300px;
                border: 1px solid #dadada;
                box-shadow: 3px 3px #c5c5c5;
            }

            .game-next {
                margin-top: 5em;
            }

            .game-next .btn {
                margin-right: 1em;
                display: inline-block;
            }
        </style>
        <script th:inline="javascript">
        var teamOne = "<%- playerOneName %>";
        var teamTwo = "<%- playerTwoName %>";
        <% if (currentQuestId) { %>
        var currentQuestId = <%- currentQuestId %>;
        <% } %>
        <% if (questionIds) { %>
        var questionIds = <%- JSON.stringify(questionIds) %>;
        <% } %>
        <% if (scoreKeeper) { %>
        var scoreKeeper = <%- JSON.stringify(scoreKeeper) %>;
        <% } %>
        </script>
    </head>
    <body>
        <div id="app" class="px-4 py-2 my-5 text-center">
              
            <div class="game-logo"><img class="d-block mx-auto mb-4" src="/assets/icons/game-logo.png" alt="logo"></div>
            <h1 class="display-5 fw-bold">Guess Pani Sollu</h1>
            <div class="col-lg-6 mx-auto">
                <p class="lead mb-2"><b><%- playerOneName %>: </b><span>#{{scoreKeeper.teamOne}}</span>&nbsp;&nbsp;<b><%- playerTwoName %>: </b><span>#{{scoreKeeper.teamTwo}}</span></p>
                <p class="lead mb-4"><b>Rules:</b> On the screen you will get 1 to many clues, from that you got to guess the song name out of it.</p>
            </div>
            <div class="py-1">
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-5 g-5" style="justify-content: center;">
                    <div class="col" v-for="clue in option.clues" v-if="clue.visible">
                        <div class="game-image">
                            <img :src="'/assets/games/'+clue.img+'.png'" alt="clue">
                        </div>
                    </div>
                </div>
                <div class="game-next">
                    <button type="button" v-if="ifAllClue && showAnswer && lastQuestion" class="btn btn-danger" @click="restartGame">Play Again</button>
                    <button type="button" @click="nextClue" class="btn btn-outline-primary" :disabled="ifAllClue">Next Clue</button>
                    <button v-if="ifAllClue" type="button" @click="enableAnswer" data-bs-toggle="modal" data-bs-target="#showAnswer" class="btn btn-success">Show Answer</button>
                    <button v-if="ifAllClue && showAnswer && !lastQuestion" type="button" @click="nextQuestion" class="btn btn-primary">Next Question</button>
                </div>
            </div>

            <div class="modal fade" id="showAnswer" tabindex="-1" aria-labelledby="showAnswer" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title">Answer</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <p class="display-5"><b>{{lastQuestion ? 'The End' : ''}}</b> <br>{{songName}}</p>
                      <div class="row">
                          <div class="col-6">
                            <div class="card text-center">
                                <div class="card-header">
                                  Team #1
                                </div>
                                <div class="card-body">
                                  <h5 class="card-title"><%- playerOneName %></h5>
                                  <!-- <p class="card-text">With supporting text below as a natural lead-in to additional content.</p> -->
                                  <button type="button" :disabled="disableScoreBtns.teamOne" class="btn btn-primary" @click.prevent="scoreCounter(1)">Add +1</button>
                                </div>
                                <div class="card-footer text-muted">
                                  Total Points #{{scoreKeeper.teamOne}}
                                </div>
                              </div>
                          </div>
                          <div class="col-6">
                            <div class="card text-center">
                                <div class="card-header">
                                  Team #2
                                </div>
                                <div class="card-body">
                                  <h5 class="card-title"><%- playerTwoName %></h5>
                                  <!-- <p class="card-text">With supporting text below as a natural lead-in to additional content.</p> -->
                                  <button type="button" :disabled="disableScoreBtns.teamTwo" @click.prevent="scoreCounter(2)" class="btn btn-primary">Add +1</button>
                                </div>
                                <div class="card-footer text-muted">
                                  Total Points #{{scoreKeeper.teamTwo}}
                                </div>
                              </div>
                          </div>
                          <div class="col-12 text-center">
                            <button type="button" class="btn btn-success mt-3" data-bs-dismiss="modal" aria-label="Close">No points/Skip</button>
                          </div>
                      </div>
                    </div>                    
                  </div>
                </div>
              </div>
        </div>

        <script>
            new Vue({
                el: "#app",
                data: {
                    questions: window.questionIds || [],
                    option: {
                        answer: '',
                        question: '',
                        clues: []
                    },
                    allOptions: {clues: [], answer: ''},
                    songName: '',
                    showAnswer: false,
                    ifAllClue: false,
                    currentQuestion: window.currentQuestId || 0,
                    lastQuestion: false,
                    scoreKeeper: {
                        teamOne: window.scoreKeeper ? window.scoreKeeper.teamOne : 0,
                        teamTwo: window.scoreKeeper ? window.scoreKeeper.teamTwo : 0
                    },
                    disableScoreBtns: {
                        teamOne: false,
                        teamTwo: false
                    }
                },
                created () {
                    this.getClues();
                },
                methods: {
                    nextClue () {
                        let allAnswersVisible = true;
                        let exitIndex = 0;
                        for(let i=0; i < this.option.clues.length ; i++) {
                            if (!this.option.clues[i].visible) {        	
                            exitIndex = i;
                            this.option.clues[i].visible = true;
                            break;
                            }
                        }
                        if (exitIndex != (this.option.clues.length - 1)) {
                            allAnswersVisible = false;
                        } else {
                            this.ifAllClue = true;
                        }
                        this.$forceUpdate();
                    
                    },
                    async nextQuestion () {
                        this.reset();
                        try {
                            const option = await this.getClues();
                            this.disableScoreBtns = {
                                teamOne: false,
                                teamTwo: false
                            }
                        } catch (error) {
                            console.log(error);
                            alert('Error occurred')
                        }                        
                        this.$forceUpdate();
                    
                    },
                    enableAnswer () {
                        this.showAnswer = true;
                        this.songName = this.option.answer;
                    },
                    reset () {
                        this.showAnswer = false;
                        this.ifAllClue = false;
                        this.songName = '';
                        this.option = {
                            answer : '',
                            question: '',
                            clues: []
                        }
                    },
                    randomNumber(min, max) { 
                        return Math.random() * (max - min) + min;
                    },
                    getClues (questionId) {
                        return new Promise ((resolve, reject) => {
                            this.$http.post('/get-clues/', {scoreKeeper: this.scoreKeeper, currentQuestion: this.currentQuestion}).then(res => {
                                const responseBody = res.body;
                                if (responseBody.success) {
                                    this.lastQuestion = responseBody.endOfQuestion;
                                    this.allOptions.clues = responseBody.clues;
                                    this.allOptions.answer = responseBody.answer;
                                    this.currentQuestion = responseBody.nextQuestId;
                                    this.option.answer = this.allOptions.answer;
                                    this.allOptions.clues.forEach((item, i) => {
                                        this.option.clues.push({
                                            visible: i == 0 ? true : false,
                                            img: item
                                        })
                                    });
                                    resolve(this.option);
                                }
                            },error=>{
                                console.log(error);
                                reject (error.body);
                            })
                        })
                    },
                    scoreCounter (team) {
                        if (team === 1) {
                            ++this.scoreKeeper.teamOne;
                            this.disableScoreBtns.teamTwo = true;
                        } else {
                            ++this.scoreKeeper.teamTwo; 
                            this.disableScoreBtns.teamOne = true;
                        }
                    },
                    restartGame () {
                        window.location.href = "/play-time/";
                    }
                }
                })
        </script>
    </body>
</html>